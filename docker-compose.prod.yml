version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: rfp-analysis-db-prod
    environment:
      POSTGRES_DB: rfp_analysis
      POSTGRES_USER: rfp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./server/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rfp-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rfp_user -d rfp_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rfp-analysis-api-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: rfp_analysis
      DB_USER: rfp_user
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      MAX_DOCUMENT_SIZE_MB: 25
      UPLOAD_DIR: uploads
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    volumes:
      - backend_uploads_prod:/app/uploads
    networks:
      - rfp-network-prod
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: rfp-analysis-frontend-prod
    networks:
      - rfp-network-prod
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rfp-analysis-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - rfp-network-prod
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local

networks:
  rfp-network-prod:
    driver: bridge